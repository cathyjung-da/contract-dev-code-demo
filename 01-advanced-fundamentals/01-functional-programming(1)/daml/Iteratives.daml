-- https://docs.google.com/presentation/d/16P0d8DKpFJioHq2A2ykzrB374mTaOLxPX_d1vXQKzdc/edit#slide=id.g23a26c16a23_0_940
module Iteratives where

import Daml.Script 

factorial: Int -> Int
factorial n = 
   if (n < 2) then 1 
   else n * factorial (n - 1)

testFac = script do
   debug $ factorial 5 -- 120


-- "... recursion can only happen at the top level."
-- factorial : Int -> Int
-- factorial n =
--    factorial' 1 n
--    where
--    factorial' acc n' =
--       if n == 1
--       then acc
--       else factorial' (acc * n') $ n' - 1


moduloUsingMap: [Int] -> Int -> [Int]
moduloUsingMap x y = map (% y) x

testMap = script do
   debug $ moduloUsingMap [14, 15, 19, 20] 3  --[2,0,1,2]


sumList: [Int] -> Int
sumList x = foldl (+) 0 x

testFolds = script do
   debug $ sumList [1..4]   -- 10
